{"version":3,"file":"js/application-fe4b8e8627738ccbf556.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/application.js","webpack:///./node_modules/jquery-ujs/src/rails.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"http://localhost:3000/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/application.js\");\n","/* eslint no-console:0 */\n// This file is automatically compiled by Webpack, along with any other files\n// present in this directory. You're encouraged to place your actual application logic in\n// a relevant structure within app/javascript and only use these pack files to reference\n// that code so it'll be compiled.\n//\n// To reference this file, add <%= javascript_pack_tag 'application' %> to the appropriate\n// layout file, like app/views/layouts/application.html.erb\n\n\n// Uncomment to copy all static images under ../images to the output folder and reference\n// them with the image_pack_tag helper in views (e.g <%= image_pack_tag 'rails.png' %>)\n// or the `imagePath` JavaScript helper below.\n//\n// const images = require.context('../images', true)\n// const imagePath = (name) => images(name, true)\n\nimport registerElements from '@sixoverground/tang'\nimport '@sixoverground/tang/lib/css/main.css'\nimport {} from 'jquery-ujs'\n\nconsole.log('Hello World from Webpacker 1.2')\n\nregisterElements()","/* jshint node: true */\n\n/**\n * Unobtrusive scripting adapter for jQuery\n * https://github.com/rails/jquery-ujs\n *\n * Requires jQuery 1.8.0 or later.\n *\n * Released under the MIT license\n *\n */\n(function () {\n  'use strict';\n\n  var jqueryUjsInit = function ($, undefined) {\n    // Cut down on the number of issues from people inadvertently including jquery_ujs twice\n    // by detecting and raising an error when it happens.\n    if ($.rails !== undefined) {\n      $.error('jquery-ujs has already been loaded!');\n    } // Shorthand to make it a little easier to call public rails functions from within rails.js\n\n\n    var rails;\n    var $document = $(document);\n    $.rails = rails = {\n      // Link elements bound by jquery-ujs\n      linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',\n      // Button elements bound by jquery-ujs\n      buttonClickSelector: 'button[data-remote]:not([form]):not(form button), button[data-confirm]:not([form]):not(form button)',\n      // Select elements bound by jquery-ujs\n      inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',\n      // Form elements bound by jquery-ujs\n      formSubmitSelector: 'form:not([data-turbo=true])',\n      // Form input elements bound by jquery-ujs\n      formInputClickSelector: 'form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',\n      // Form input elements disabled during form submission\n      disableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',\n      // Form input elements re-enabled after form submission\n      enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',\n      // Form required input elements\n      requiredInputSelector: 'input[name][required]:not([disabled]), textarea[name][required]:not([disabled])',\n      // Form file input elements\n      fileInputSelector: 'input[name][type=file]:not([disabled])',\n      // Link onClick disable selector with possible reenable after remote submission\n      linkDisableSelector: 'a[data-disable-with], a[data-disable]',\n      // Button onClick disable selector with possible reenable after remote submission\n      buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]',\n      // Up-to-date Cross-Site Request Forgery token\n      csrfToken: function () {\n        return $('meta[name=csrf-token]').attr('content');\n      },\n      // URL param that must contain the CSRF token\n      csrfParam: function () {\n        return $('meta[name=csrf-param]').attr('content');\n      },\n      // Make sure that every Ajax request sends the CSRF token\n      CSRFProtection: function (xhr) {\n        var token = rails.csrfToken();\n        if (token) xhr.setRequestHeader('X-CSRF-Token', token);\n      },\n      // Make sure that all forms have actual up-to-date tokens (cached forms contain old ones)\n      refreshCSRFTokens: function () {\n        $('form input[name=\"' + rails.csrfParam() + '\"]').val(rails.csrfToken());\n      },\n      // Triggers an event on an element and returns false if the event result is false\n      fire: function (obj, name, data) {\n        var event = $.Event(name);\n        obj.trigger(event, data);\n        return event.result !== false;\n      },\n      // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm\n      confirm: function (message) {\n        return confirm(message);\n      },\n      // Default ajax function, may be overridden with custom function in $.rails.ajax\n      ajax: function (options) {\n        return $.ajax(options);\n      },\n      // Default way to get an element's href. May be overridden at $.rails.href.\n      href: function (element) {\n        return element[0].href;\n      },\n      // Checks \"data-remote\" if true to handle the request through a XHR request.\n      isRemote: function (element) {\n        return element.data('remote') !== undefined && element.data('remote') !== false;\n      },\n      // Submits \"remote\" forms and links with ajax\n      handleRemote: function (element) {\n        var method, url, data, withCredentials, dataType, options;\n\n        if (rails.fire(element, 'ajax:before')) {\n          withCredentials = element.data('with-credentials') || null;\n          dataType = element.data('type') || $.ajaxSettings && $.ajaxSettings.dataType;\n\n          if (element.is('form')) {\n            method = element.data('ujs:submit-button-formmethod') || element.attr('method');\n            url = element.data('ujs:submit-button-formaction') || element.attr('action');\n            data = $(element[0]).serializeArray(); // memoized value from clicked submit button\n\n            var button = element.data('ujs:submit-button');\n\n            if (button) {\n              data.push(button);\n              element.data('ujs:submit-button', null);\n            }\n\n            element.data('ujs:submit-button-formmethod', null);\n            element.data('ujs:submit-button-formaction', null);\n          } else if (element.is(rails.inputChangeSelector)) {\n            method = element.data('method');\n            url = element.data('url');\n            data = element.serialize();\n            if (element.data('params')) data = data + '&' + element.data('params');\n          } else if (element.is(rails.buttonClickSelector)) {\n            method = element.data('method') || 'get';\n            url = element.data('url');\n            data = element.serialize();\n            if (element.data('params')) data = data + '&' + element.data('params');\n          } else {\n            method = element.data('method');\n            url = rails.href(element);\n            data = element.data('params') || null;\n          }\n\n          options = {\n            type: method || 'GET',\n            data: data,\n            dataType: dataType,\n            // stopping the \"ajax:beforeSend\" event will cancel the ajax request\n            beforeSend: function (xhr, settings) {\n              if (settings.dataType === undefined) {\n                xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);\n              }\n\n              if (rails.fire(element, 'ajax:beforeSend', [xhr, settings])) {\n                element.trigger('ajax:send', xhr);\n              } else {\n                return false;\n              }\n            },\n            success: function (data, status, xhr) {\n              element.trigger('ajax:success', [data, status, xhr]);\n            },\n            complete: function (xhr, status) {\n              element.trigger('ajax:complete', [xhr, status]);\n            },\n            error: function (xhr, status, error) {\n              element.trigger('ajax:error', [xhr, status, error]);\n            },\n            crossDomain: rails.isCrossDomain(url)\n          }; // There is no withCredentials for IE6-8 when\n          // \"Enable native XMLHTTP support\" is disabled\n\n          if (withCredentials) {\n            options.xhrFields = {\n              withCredentials: withCredentials\n            };\n          } // Only pass url to `ajax` options if not blank\n\n\n          if (url) {\n            options.url = url;\n          }\n\n          return rails.ajax(options);\n        } else {\n          return false;\n        }\n      },\n      // Determines if the request is a cross domain request.\n      isCrossDomain: function (url) {\n        var originAnchor = document.createElement('a');\n        originAnchor.href = location.href;\n        var urlAnchor = document.createElement('a');\n\n        try {\n          urlAnchor.href = url; // This is a workaround to a IE bug.\n\n          urlAnchor.href = urlAnchor.href; // If URL protocol is false or is a string containing a single colon\n          // *and* host are false, assume it is not a cross-domain request\n          // (should only be the case for IE7 and IE compatibility mode).\n          // Otherwise, evaluate protocol and host of the URL against the origin\n          // protocol and host.\n\n          return !((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host || originAnchor.protocol + '//' + originAnchor.host === urlAnchor.protocol + '//' + urlAnchor.host);\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain.\n          return true;\n        }\n      },\n      // Handles \"data-method\" on links such as:\n      // <a href=\"/users/5\" data-method=\"delete\" rel=\"nofollow\" data-confirm=\"Are you sure?\">Delete</a>\n      handleMethod: function (link) {\n        var href = rails.href(link),\n            method = link.data('method'),\n            target = link.attr('target'),\n            csrfToken = rails.csrfToken(),\n            csrfParam = rails.csrfParam(),\n            form = $('<form method=\"post\" action=\"' + href + '\"></form>'),\n            metadataInput = '<input name=\"_method\" value=\"' + method + '\" type=\"hidden\" />';\n\n        if (csrfParam !== undefined && csrfToken !== undefined && !rails.isCrossDomain(href)) {\n          metadataInput += '<input name=\"' + csrfParam + '\" value=\"' + csrfToken + '\" type=\"hidden\" />';\n        }\n\n        if (target) {\n          form.attr('target', target);\n        }\n\n        form.hide().append(metadataInput).appendTo('body');\n        form.submit();\n      },\n      // Helper function that returns form elements that match the specified CSS selector\n      // If form is actually a \"form\" element this will return associated elements outside the from that have\n      // the html form attribute set\n      formElements: function (form, selector) {\n        return form.is('form') ? $(form[0].elements).filter(selector) : form.find(selector);\n      },\n\n      /* Disables form elements:\n        - Caches element value in 'ujs:enable-with' data store\n        - Replaces element text with value of 'data-disable-with' attribute\n        - Sets disabled property to true\n      */\n      disableFormElements: function (form) {\n        rails.formElements(form, rails.disableSelector).each(function () {\n          rails.disableFormElement($(this));\n        });\n      },\n      disableFormElement: function (element) {\n        var method, replacement;\n        method = element.is('button') ? 'html' : 'val';\n        replacement = element.data('disable-with');\n\n        if (replacement !== undefined) {\n          element.data('ujs:enable-with', element[method]());\n          element[method](replacement);\n        }\n\n        element.prop('disabled', true);\n        element.data('ujs:disabled', true);\n      },\n\n      /* Re-enables disabled form elements:\n        - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)\n        - Sets disabled property to false\n      */\n      enableFormElements: function (form) {\n        rails.formElements(form, rails.enableSelector).each(function () {\n          rails.enableFormElement($(this));\n        });\n      },\n      enableFormElement: function (element) {\n        var method = element.is('button') ? 'html' : 'val';\n\n        if (element.data('ujs:enable-with') !== undefined) {\n          element[method](element.data('ujs:enable-with'));\n          element.removeData('ujs:enable-with'); // clean up cache\n        }\n\n        element.prop('disabled', false);\n        element.removeData('ujs:disabled');\n      },\n\n      /* For 'data-confirm' attribute:\n         - Fires `confirm` event\n         - Shows the confirmation dialog\n         - Fires the `confirm:complete` event\n          Returns `true` if no function stops the chain and user chose yes; `false` otherwise.\n         Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.\n         Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function\n         return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.\n      */\n      allowAction: function (element) {\n        var message = element.data('confirm'),\n            answer = false,\n            callback;\n\n        if (!message) {\n          return true;\n        }\n\n        if (rails.fire(element, 'confirm')) {\n          try {\n            answer = rails.confirm(message);\n          } catch (e) {\n            (console.error || console.log).call(console, e.stack || e);\n          }\n\n          callback = rails.fire(element, 'confirm:complete', [answer]);\n        }\n\n        return answer && callback;\n      },\n      // Helper function which checks for blank inputs in a form that match the specified CSS selector\n      blankInputs: function (form, specifiedSelector, nonBlank) {\n        var foundInputs = $(),\n            input,\n            valueToCheck,\n            radiosForNameWithNoneSelected,\n            radioName,\n            selector = specifiedSelector || 'input,textarea',\n            requiredInputs = form.find(selector),\n            checkedRadioButtonNames = {};\n        requiredInputs.each(function () {\n          input = $(this);\n\n          if (input.is('input[type=radio]')) {\n            // Don't count unchecked required radio as blank if other radio with same name is checked,\n            // regardless of whether same-name radio input has required attribute or not. The spec\n            // states https://www.w3.org/TR/html5/forms.html#the-required-attribute\n            radioName = input.attr('name'); // Skip if we've already seen the radio with this name.\n\n            if (!checkedRadioButtonNames[radioName]) {\n              // If none checked\n              if (form.find('input[type=radio]:checked[name=\"' + radioName + '\"]').length === 0) {\n                radiosForNameWithNoneSelected = form.find('input[type=radio][name=\"' + radioName + '\"]');\n                foundInputs = foundInputs.add(radiosForNameWithNoneSelected);\n              } // We only need to check each name once.\n\n\n              checkedRadioButtonNames[radioName] = radioName;\n            }\n          } else {\n            valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : !!input.val();\n\n            if (valueToCheck === nonBlank) {\n              foundInputs = foundInputs.add(input);\n            }\n          }\n        });\n        return foundInputs.length ? foundInputs : false;\n      },\n      // Helper function which checks for non-blank inputs in a form that match the specified CSS selector\n      nonBlankInputs: function (form, specifiedSelector) {\n        return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank\n      },\n      // Helper function, needed to provide consistent behavior in IE\n      stopEverything: function (e) {\n        $(e.target).trigger('ujs:everythingStopped');\n        e.stopImmediatePropagation();\n        return false;\n      },\n      //  Replace element's html with the 'data-disable-with' after storing original html\n      //  and prevent clicking on it\n      disableElement: function (element) {\n        var replacement = element.data('disable-with');\n\n        if (replacement !== undefined) {\n          element.data('ujs:enable-with', element.html()); // store enabled state\n\n          element.html(replacement);\n        }\n\n        element.on('click.railsDisable', function (e) {\n          // prevent further clicking\n          return rails.stopEverything(e);\n        });\n        element.data('ujs:disabled', true);\n      },\n      // Restore element to its original state which was disabled by 'disableElement' above\n      enableElement: function (element) {\n        if (element.data('ujs:enable-with') !== undefined) {\n          element.html(element.data('ujs:enable-with')); // set to old enabled state\n\n          element.removeData('ujs:enable-with'); // clean up cache\n        }\n\n        element.off('click.railsDisable'); // enable element\n\n        element.removeData('ujs:disabled');\n      }\n    };\n\n    if (rails.fire($document, 'rails:attachBindings')) {\n      $.ajaxPrefilter(function (options, originalOptions, xhr) {\n        if (!options.crossDomain) {\n          rails.CSRFProtection(xhr);\n        }\n      }); // This event works the same as the load event, except that it fires every\n      // time the page is loaded.\n      //\n      // See https://github.com/rails/jquery-ujs/issues/357\n      // See https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching\n\n      $(window).on('pageshow.rails', function () {\n        $($.rails.enableSelector).each(function () {\n          var element = $(this);\n\n          if (element.data('ujs:disabled')) {\n            $.rails.enableFormElement(element);\n          }\n        });\n        $($.rails.linkDisableSelector).each(function () {\n          var element = $(this);\n\n          if (element.data('ujs:disabled')) {\n            $.rails.enableElement(element);\n          }\n        });\n      });\n      $document.on('ajax:complete', rails.linkDisableSelector, function () {\n        rails.enableElement($(this));\n      });\n      $document.on('ajax:complete', rails.buttonDisableSelector, function () {\n        rails.enableFormElement($(this));\n      });\n      $document.on('click.rails', rails.linkClickSelector, function (e) {\n        var link = $(this),\n            method = link.data('method'),\n            data = link.data('params'),\n            metaClick = e.metaKey || e.ctrlKey;\n        if (!rails.allowAction(link)) return rails.stopEverything(e);\n        if (!metaClick && link.is(rails.linkDisableSelector)) rails.disableElement(link);\n\n        if (rails.isRemote(link)) {\n          if (metaClick && (!method || method === 'GET') && !data) {\n            return true;\n          }\n\n          var handleRemote = rails.handleRemote(link); // Response from rails.handleRemote() will either be false or a deferred object promise.\n\n          if (handleRemote === false) {\n            rails.enableElement(link);\n          } else {\n            handleRemote.fail(function () {\n              rails.enableElement(link);\n            });\n          }\n\n          return false;\n        } else if (method) {\n          rails.handleMethod(link);\n          return false;\n        }\n      });\n      $document.on('click.rails', rails.buttonClickSelector, function (e) {\n        var button = $(this);\n        if (!rails.allowAction(button) || !rails.isRemote(button)) return rails.stopEverything(e);\n        if (button.is(rails.buttonDisableSelector)) rails.disableFormElement(button);\n        var handleRemote = rails.handleRemote(button); // Response from rails.handleRemote() will either be false or a deferred object promise.\n\n        if (handleRemote === false) {\n          rails.enableFormElement(button);\n        } else {\n          handleRemote.fail(function () {\n            rails.enableFormElement(button);\n          });\n        }\n\n        return false;\n      });\n      $document.on('change.rails', rails.inputChangeSelector, function (e) {\n        var link = $(this);\n        if (!rails.allowAction(link) || !rails.isRemote(link)) return rails.stopEverything(e);\n        rails.handleRemote(link);\n        return false;\n      });\n      $document.on('submit.rails', rails.formSubmitSelector, function (e) {\n        var form = $(this),\n            remote = rails.isRemote(form),\n            blankRequiredInputs,\n            nonBlankFileInputs;\n        if (!rails.allowAction(form)) return rails.stopEverything(e); // Skip other logic when required values are missing or file upload is present\n\n        if (form.attr('novalidate') === undefined) {\n          if (form.data('ujs:formnovalidate-button') === undefined) {\n            blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector, false);\n\n            if (blankRequiredInputs && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {\n              return rails.stopEverything(e);\n            }\n          } else {\n            // Clear the formnovalidate in case the next button click is not on a formnovalidate button\n            // Not strictly necessary to do here, since it is also reset on each button click, but just to be certain\n            form.data('ujs:formnovalidate-button', undefined);\n          }\n        }\n\n        if (remote) {\n          nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);\n\n          if (nonBlankFileInputs) {\n            // Slight timeout so that the submit button gets properly serialized\n            // (make it easy for event handler to serialize form without disabled values)\n            setTimeout(function () {\n              rails.disableFormElements(form);\n            }, 13);\n            var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]); // Re-enable form elements if event bindings return false (canceling normal form submission)\n\n            if (!aborted) {\n              setTimeout(function () {\n                rails.enableFormElements(form);\n              }, 13);\n            }\n\n            return aborted;\n          }\n\n          rails.handleRemote(form);\n          return false;\n        } else {\n          // Slight timeout so that the submit button gets properly serialized\n          setTimeout(function () {\n            rails.disableFormElements(form);\n          }, 13);\n        }\n      });\n      $document.on('click.rails', rails.formInputClickSelector, function (event) {\n        var button = $(this);\n        if (!rails.allowAction(button)) return rails.stopEverything(event); // Register the pressed submit button\n\n        var name = button.attr('name'),\n            data = name ? {\n          name: name,\n          value: button.val()\n        } : null;\n        var form = button.closest('form');\n\n        if (form.length === 0) {\n          form = $('#' + button.attr('form'));\n        }\n\n        form.data('ujs:submit-button', data); // Save attributes from button\n\n        form.data('ujs:formnovalidate-button', button.attr('formnovalidate'));\n        form.data('ujs:submit-button-formaction', button.attr('formaction'));\n        form.data('ujs:submit-button-formmethod', button.attr('formmethod'));\n      });\n      $document.on('ajax:send.rails', rails.formSubmitSelector, function (event) {\n        if (this === event.target) rails.disableFormElements($(this));\n      });\n      $document.on('ajax:complete.rails', rails.formSubmitSelector, function (event) {\n        if (this === event.target) rails.enableFormElements($(this));\n      });\n      $(function () {\n        rails.refreshCSRFTokens();\n      });\n    }\n  };\n\n  if (window.jQuery) {\n    jqueryUjsInit(jQuery);\n  } else if (typeof exports === 'object' && typeof module === 'object') {\n    module.exports = jqueryUjsInit;\n  }\n})();"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;ACvsourceRoot":""}